import sys

sys.path.append('generated/')

import json
import time

import grpc
import text_embedding_pb2
import text_embedding_pb2_grpc

# def run():
#     with grpc.insecure_channel('localhost:50051') as channel:
#     # with grpc.insecure_channel('34.74.89.40:80') as channel:
#         stub = text_embedding_pb2_grpc.TextEmbeddingStub(channel)
#         # response = stub.SaveTextEmbedding(text_embedding_pb2.SaveTextEmbeddingRequest(
#         #     url="https://seekingalpha.com/article/4654739-finding-fee-savings-in-fixed-income",
#         #     text="Summary As indexing has grown, investors have benefited substantially by saving on fees and avoiding active underperformance. These benefits are not limited just to equities but have also extended to other asset classes including the fixed income space. Index bond fund expenses in the U.S. and Europe have been consistently lower than their active counterparts for the past decade. One of the benefits of indexing is its low cost relative to active management. As indexing has grown, investors have benefited substantially by saving on fees and avoiding active underperformance. These benefits are not limited just to equities but have also extended to other asset classes including the fixed income space, where fees can play a particularly pivotal role. In Exhibit 1, we see that index bond fund expenses in the U.S. and Europe have been consistently lower than their active counterparts for the past decade. While that spread has narrowed in recent years, we still observe a fee differential of 39 bps in the U.S. and 55 bps in Europe as of 2022. Using the same average fee differentials between active and passive fixed income funds in the U.S. and Europe, as applied regionally to approximately USD 102 billion of assets invested in mutual funds and ETFs tracking iBoxx corporate bond indices in both regions, we can estimate a current run rate of equal to at least USD 465 million per year in fee savings made by passive investors thanks in part to the iBoxx series (see Exhibit 2). Of course, this USD 465 million estimate understates the full cost savings of the fixed income index industry, since it encompasses funds tracking only select indices from S&P Dow Jones Indices in the U.S. and Europe. Our Annual Survey of Indexed Assets shows global assets tracking our iBoxx Corporate indices were USD 121 billion as of December 2022 (this also includes institutional segregated mandates, as well as assets outside the U.S. and Europe). To provide context on the size of the passive market in fixed income, this number makes up only 1% of the global total of USD 11.5 trillion in assets of all open-end bond funds 1and only around 0.5% of global rated corporate debt outstanding. In other words, there is plenty of headroom for future passive growth in fixed income, and the prospects for greater fee savings are promising. Obviously, the savings generated by the shift from active to passive management would be of no consolation if investors lost more in performance shortfalls than they gained in reduced fees. As readers of our SPIVAÂ®reports may know, in the 15 years ending in June 2023, 94% of allactively managedGeneral Investment Grade bond funds lagged the iBoxx $ Liquid Investment Grade Index. High Yield results were almost equally disappointing. As indexing in fixed income has gained momentum, bond market participants have benefited from fee savings and avoidance of active underperformance, a powerful combination. Regulated open-end funds include mutual funds, exchange-traded funds (ETFs) and institutional funds. Level of global rated corporate debt reached USD 23.2 trillion as of July 1, 2023.")
#         # )

#         response = stub.SaveTextEmbedding(text_embedding_pb2.SaveTextEmbeddingRequest(
#             url="https://seekingalpha.com//article/4639146-politics-and-the-markets-110123",
#         ))
#         print("Server response: ", response.status)

def get_urls_from_json(file_name):
    # Open the file and load the JSON content
    with open(file_name, 'r') as file:
        data = json.load(file)
    
    # Extract the list of articles
    articles = data.get('articles_metadata', [])
    
    # Extract URLs from each article    
    urls = [article.get('article_url') for article in articles if 'Earnings Call Presentation' not in article['title']]
    return urls

def run_json(file_name):
    urls = get_urls_from_json(file_name)

    start_time = time.time()
    with grpc.insecure_channel('localhost:50056') as channel:
    # with grpc.insecure_channel('34.74.89.40:80') as channel:
        stub = text_embedding_pb2_grpc.TextEmbeddingStub(channel)

        for url in urls:
            response = stub.SaveTextEmbedding(text_embedding_pb2.SaveTextEmbeddingRequest(url=url,))

            print(f"Server response for url {url} : {response.status}")

    end_time = time.time()
    print(f"Total run time : {end_time - start_time} secs!")


if __name__ == '__main__':
    # run()
    # for i in range(9):
    #     run_json(f'/Users/saicharithaakula/Desktop/aamasterse/cloud/final/cloud-and-ml-RAG/json_dumps/2023-11-1{i+1}T04:00:00.000Z.json')
    #for i in range(10):
    run_json(f'/Users/saicharithaakula/Desktop/aamasterse/cloud/final/cloud-and-ml-RAG/json_dumps/2023-11-14T04:00:00.000Z.json')    
